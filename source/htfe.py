# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_htfe', [dirname(__file__)])
        except ImportError:
            import _htfe
            return _htfe
        if fp is not None:
            try:
                _mod = imp.load_module('_htfe', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _htfe = swig_import_helper()
    del swig_import_helper
else:
    import _htfe
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _htfe.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _htfe.SwigPyIterator_value(self)
    def incr(self, n=1): return _htfe.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _htfe.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _htfe.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _htfe.SwigPyIterator_equal(self, *args)
    def copy(self): return _htfe.SwigPyIterator_copy(self)
    def next(self): return _htfe.SwigPyIterator_next(self)
    def __next__(self): return _htfe.SwigPyIterator___next__(self)
    def previous(self): return _htfe.SwigPyIterator_previous(self)
    def advance(self, *args): return _htfe.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _htfe.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _htfe.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _htfe.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _htfe.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _htfe.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _htfe.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _htfe.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorld(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorld, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorld, name)
    __repr__ = _swig_repr
    def iterator(self): return _htfe.vectorld_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _htfe.vectorld___nonzero__(self)
    def __bool__(self): return _htfe.vectorld___bool__(self)
    def __len__(self): return _htfe.vectorld___len__(self)
    def pop(self): return _htfe.vectorld_pop(self)
    def __getslice__(self, *args): return _htfe.vectorld___getslice__(self, *args)
    def __setslice__(self, *args): return _htfe.vectorld___setslice__(self, *args)
    def __delslice__(self, *args): return _htfe.vectorld___delslice__(self, *args)
    def __delitem__(self, *args): return _htfe.vectorld___delitem__(self, *args)
    def __getitem__(self, *args): return _htfe.vectorld___getitem__(self, *args)
    def __setitem__(self, *args): return _htfe.vectorld___setitem__(self, *args)
    def append(self, *args): return _htfe.vectorld_append(self, *args)
    def empty(self): return _htfe.vectorld_empty(self)
    def size(self): return _htfe.vectorld_size(self)
    def clear(self): return _htfe.vectorld_clear(self)
    def swap(self, *args): return _htfe.vectorld_swap(self, *args)
    def get_allocator(self): return _htfe.vectorld_get_allocator(self)
    def begin(self): return _htfe.vectorld_begin(self)
    def end(self): return _htfe.vectorld_end(self)
    def rbegin(self): return _htfe.vectorld_rbegin(self)
    def rend(self): return _htfe.vectorld_rend(self)
    def pop_back(self): return _htfe.vectorld_pop_back(self)
    def erase(self, *args): return _htfe.vectorld_erase(self, *args)
    def __init__(self, *args): 
        this = _htfe.new_vectorld(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _htfe.vectorld_push_back(self, *args)
    def front(self): return _htfe.vectorld_front(self)
    def back(self): return _htfe.vectorld_back(self)
    def assign(self, *args): return _htfe.vectorld_assign(self, *args)
    def resize(self, *args): return _htfe.vectorld_resize(self, *args)
    def insert(self, *args): return _htfe.vectorld_insert(self, *args)
    def reserve(self, *args): return _htfe.vectorld_reserve(self, *args)
    def capacity(self): return _htfe.vectorld_capacity(self)
    __swig_destroy__ = _htfe.delete_vectorld
    __del__ = lambda self : None;
vectorld_swigregister = _htfe.vectorld_swigregister
vectorld_swigregister(vectorld)

class LayerDesc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerDesc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerDesc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_spatialWidth"] = _htfe.LayerDesc__spatialWidth_set
    __swig_getmethods__["_spatialWidth"] = _htfe.LayerDesc__spatialWidth_get
    if _newclass:_spatialWidth = _swig_property(_htfe.LayerDesc__spatialWidth_get, _htfe.LayerDesc__spatialWidth_set)
    __swig_setmethods__["_spatialHeight"] = _htfe.LayerDesc__spatialHeight_set
    __swig_getmethods__["_spatialHeight"] = _htfe.LayerDesc__spatialHeight_get
    if _newclass:_spatialHeight = _swig_property(_htfe.LayerDesc__spatialHeight_get, _htfe.LayerDesc__spatialHeight_set)
    __swig_setmethods__["_temporalWidth"] = _htfe.LayerDesc__temporalWidth_set
    __swig_getmethods__["_temporalWidth"] = _htfe.LayerDesc__temporalWidth_get
    if _newclass:_temporalWidth = _swig_property(_htfe.LayerDesc__temporalWidth_get, _htfe.LayerDesc__temporalWidth_set)
    __swig_setmethods__["_temporalHeight"] = _htfe.LayerDesc__temporalHeight_set
    __swig_getmethods__["_temporalHeight"] = _htfe.LayerDesc__temporalHeight_get
    if _newclass:_temporalHeight = _swig_property(_htfe.LayerDesc__temporalHeight_get, _htfe.LayerDesc__temporalHeight_set)
    __swig_setmethods__["_receptiveFieldRadius"] = _htfe.LayerDesc__receptiveFieldRadius_set
    __swig_getmethods__["_receptiveFieldRadius"] = _htfe.LayerDesc__receptiveFieldRadius_get
    if _newclass:_receptiveFieldRadius = _swig_property(_htfe.LayerDesc__receptiveFieldRadius_get, _htfe.LayerDesc__receptiveFieldRadius_set)
    __swig_setmethods__["_reconstructionRadius"] = _htfe.LayerDesc__reconstructionRadius_set
    __swig_getmethods__["_reconstructionRadius"] = _htfe.LayerDesc__reconstructionRadius_get
    if _newclass:_reconstructionRadius = _swig_property(_htfe.LayerDesc__reconstructionRadius_get, _htfe.LayerDesc__reconstructionRadius_set)
    __swig_setmethods__["_predictiveRadius"] = _htfe.LayerDesc__predictiveRadius_set
    __swig_getmethods__["_predictiveRadius"] = _htfe.LayerDesc__predictiveRadius_get
    if _newclass:_predictiveRadius = _swig_property(_htfe.LayerDesc__predictiveRadius_get, _htfe.LayerDesc__predictiveRadius_set)
    __swig_setmethods__["_lateralConnectionRadius"] = _htfe.LayerDesc__lateralConnectionRadius_set
    __swig_getmethods__["_lateralConnectionRadius"] = _htfe.LayerDesc__lateralConnectionRadius_get
    if _newclass:_lateralConnectionRadius = _swig_property(_htfe.LayerDesc__lateralConnectionRadius_get, _htfe.LayerDesc__lateralConnectionRadius_set)
    __swig_setmethods__["_spatialInhibitionRadius"] = _htfe.LayerDesc__spatialInhibitionRadius_set
    __swig_getmethods__["_spatialInhibitionRadius"] = _htfe.LayerDesc__spatialInhibitionRadius_get
    if _newclass:_spatialInhibitionRadius = _swig_property(_htfe.LayerDesc__spatialInhibitionRadius_get, _htfe.LayerDesc__spatialInhibitionRadius_set)
    __swig_setmethods__["_temporalInhibitionRadius"] = _htfe.LayerDesc__temporalInhibitionRadius_set
    __swig_getmethods__["_temporalInhibitionRadius"] = _htfe.LayerDesc__temporalInhibitionRadius_get
    if _newclass:_temporalInhibitionRadius = _swig_property(_htfe.LayerDesc__temporalInhibitionRadius_get, _htfe.LayerDesc__temporalInhibitionRadius_set)
    __swig_setmethods__["_feedBackConnectionRadius"] = _htfe.LayerDesc__feedBackConnectionRadius_set
    __swig_getmethods__["_feedBackConnectionRadius"] = _htfe.LayerDesc__feedBackConnectionRadius_get
    if _newclass:_feedBackConnectionRadius = _swig_property(_htfe.LayerDesc__feedBackConnectionRadius_get, _htfe.LayerDesc__feedBackConnectionRadius_set)
    __swig_setmethods__["_spatialSparsity"] = _htfe.LayerDesc__spatialSparsity_set
    __swig_getmethods__["_spatialSparsity"] = _htfe.LayerDesc__spatialSparsity_get
    if _newclass:_spatialSparsity = _swig_property(_htfe.LayerDesc__spatialSparsity_get, _htfe.LayerDesc__spatialSparsity_set)
    __swig_setmethods__["_temporalSparsity"] = _htfe.LayerDesc__temporalSparsity_set
    __swig_getmethods__["_temporalSparsity"] = _htfe.LayerDesc__temporalSparsity_get
    if _newclass:_temporalSparsity = _swig_property(_htfe.LayerDesc__temporalSparsity_get, _htfe.LayerDesc__temporalSparsity_set)
    __swig_setmethods__["_dutyCycleDecay"] = _htfe.LayerDesc__dutyCycleDecay_set
    __swig_getmethods__["_dutyCycleDecay"] = _htfe.LayerDesc__dutyCycleDecay_get
    if _newclass:_dutyCycleDecay = _swig_property(_htfe.LayerDesc__dutyCycleDecay_get, _htfe.LayerDesc__dutyCycleDecay_set)
    __swig_setmethods__["_spatialAlpha"] = _htfe.LayerDesc__spatialAlpha_set
    __swig_getmethods__["_spatialAlpha"] = _htfe.LayerDesc__spatialAlpha_get
    if _newclass:_spatialAlpha = _swig_property(_htfe.LayerDesc__spatialAlpha_get, _htfe.LayerDesc__spatialAlpha_set)
    __swig_setmethods__["_predictiveAlpha"] = _htfe.LayerDesc__predictiveAlpha_set
    __swig_getmethods__["_predictiveAlpha"] = _htfe.LayerDesc__predictiveAlpha_get
    if _newclass:_predictiveAlpha = _swig_property(_htfe.LayerDesc__predictiveAlpha_get, _htfe.LayerDesc__predictiveAlpha_set)
    __swig_setmethods__["_lateralAlpha"] = _htfe.LayerDesc__lateralAlpha_set
    __swig_getmethods__["_lateralAlpha"] = _htfe.LayerDesc__lateralAlpha_get
    if _newclass:_lateralAlpha = _swig_property(_htfe.LayerDesc__lateralAlpha_get, _htfe.LayerDesc__lateralAlpha_set)
    __swig_setmethods__["_feedBackAlpha"] = _htfe.LayerDesc__feedBackAlpha_set
    __swig_getmethods__["_feedBackAlpha"] = _htfe.LayerDesc__feedBackAlpha_get
    if _newclass:_feedBackAlpha = _swig_property(_htfe.LayerDesc__feedBackAlpha_get, _htfe.LayerDesc__feedBackAlpha_set)
    __swig_setmethods__["_reconstructionAlpha"] = _htfe.LayerDesc__reconstructionAlpha_set
    __swig_getmethods__["_reconstructionAlpha"] = _htfe.LayerDesc__reconstructionAlpha_get
    if _newclass:_reconstructionAlpha = _swig_property(_htfe.LayerDesc__reconstructionAlpha_get, _htfe.LayerDesc__reconstructionAlpha_set)
    __swig_setmethods__["_spatialLambda"] = _htfe.LayerDesc__spatialLambda_set
    __swig_getmethods__["_spatialLambda"] = _htfe.LayerDesc__spatialLambda_get
    if _newclass:_spatialLambda = _swig_property(_htfe.LayerDesc__spatialLambda_get, _htfe.LayerDesc__spatialLambda_set)
    __swig_setmethods__["_temporalLambda"] = _htfe.LayerDesc__temporalLambda_set
    __swig_getmethods__["_temporalLambda"] = _htfe.LayerDesc__temporalLambda_get
    if _newclass:_temporalLambda = _swig_property(_htfe.LayerDesc__temporalLambda_get, _htfe.LayerDesc__temporalLambda_set)
    __swig_setmethods__["_spatialMomentum"] = _htfe.LayerDesc__spatialMomentum_set
    __swig_getmethods__["_spatialMomentum"] = _htfe.LayerDesc__spatialMomentum_get
    if _newclass:_spatialMomentum = _swig_property(_htfe.LayerDesc__spatialMomentum_get, _htfe.LayerDesc__spatialMomentum_set)
    __swig_setmethods__["_predictiveMomentum"] = _htfe.LayerDesc__predictiveMomentum_set
    __swig_getmethods__["_predictiveMomentum"] = _htfe.LayerDesc__predictiveMomentum_get
    if _newclass:_predictiveMomentum = _swig_property(_htfe.LayerDesc__predictiveMomentum_get, _htfe.LayerDesc__predictiveMomentum_set)
    __swig_setmethods__["_lateralMomentum"] = _htfe.LayerDesc__lateralMomentum_set
    __swig_getmethods__["_lateralMomentum"] = _htfe.LayerDesc__lateralMomentum_get
    if _newclass:_lateralMomentum = _swig_property(_htfe.LayerDesc__lateralMomentum_get, _htfe.LayerDesc__lateralMomentum_set)
    __swig_setmethods__["_feedBackMomentum"] = _htfe.LayerDesc__feedBackMomentum_set
    __swig_getmethods__["_feedBackMomentum"] = _htfe.LayerDesc__feedBackMomentum_get
    if _newclass:_feedBackMomentum = _swig_property(_htfe.LayerDesc__feedBackMomentum_get, _htfe.LayerDesc__feedBackMomentum_set)
    __swig_setmethods__["_reconstructionMomentum"] = _htfe.LayerDesc__reconstructionMomentum_set
    __swig_getmethods__["_reconstructionMomentum"] = _htfe.LayerDesc__reconstructionMomentum_get
    if _newclass:_reconstructionMomentum = _swig_property(_htfe.LayerDesc__reconstructionMomentum_get, _htfe.LayerDesc__reconstructionMomentum_set)
    __swig_setmethods__["_lateralScalar"] = _htfe.LayerDesc__lateralScalar_set
    __swig_getmethods__["_lateralScalar"] = _htfe.LayerDesc__lateralScalar_get
    if _newclass:_lateralScalar = _swig_property(_htfe.LayerDesc__lateralScalar_get, _htfe.LayerDesc__lateralScalar_set)
    __swig_setmethods__["_feedBackScalar"] = _htfe.LayerDesc__feedBackScalar_set
    __swig_getmethods__["_feedBackScalar"] = _htfe.LayerDesc__feedBackScalar_get
    if _newclass:_feedBackScalar = _swig_property(_htfe.LayerDesc__feedBackScalar_get, _htfe.LayerDesc__feedBackScalar_set)
    __swig_setmethods__["_blurKernelWidth"] = _htfe.LayerDesc__blurKernelWidth_set
    __swig_getmethods__["_blurKernelWidth"] = _htfe.LayerDesc__blurKernelWidth_get
    if _newclass:_blurKernelWidth = _swig_property(_htfe.LayerDesc__blurKernelWidth_get, _htfe.LayerDesc__blurKernelWidth_set)
    __swig_setmethods__["_numBlurPasses"] = _htfe.LayerDesc__numBlurPasses_set
    __swig_getmethods__["_numBlurPasses"] = _htfe.LayerDesc__numBlurPasses_get
    if _newclass:_numBlurPasses = _swig_property(_htfe.LayerDesc__numBlurPasses_get, _htfe.LayerDesc__numBlurPasses_set)
    __swig_setmethods__["_gaussianNoise"] = _htfe.LayerDesc__gaussianNoise_set
    __swig_getmethods__["_gaussianNoise"] = _htfe.LayerDesc__gaussianNoise_get
    if _newclass:_gaussianNoise = _swig_property(_htfe.LayerDesc__gaussianNoise_get, _htfe.LayerDesc__gaussianNoise_set)
    __swig_setmethods__["_minDerivative"] = _htfe.LayerDesc__minDerivative_set
    __swig_getmethods__["_minDerivative"] = _htfe.LayerDesc__minDerivative_get
    if _newclass:_minDerivative = _swig_property(_htfe.LayerDesc__minDerivative_get, _htfe.LayerDesc__minDerivative_set)
    def __init__(self): 
        this = _htfe.new_LayerDesc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _htfe.delete_LayerDesc
    __del__ = lambda self : None;
LayerDesc_swigregister = _htfe.LayerDesc_swigregister
LayerDesc_swigregister(LayerDesc)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_hiddenActivationsSpatial"] = _htfe.Layer__hiddenActivationsSpatial_set
    __swig_getmethods__["_hiddenActivationsSpatial"] = _htfe.Layer__hiddenActivationsSpatial_get
    if _newclass:_hiddenActivationsSpatial = _swig_property(_htfe.Layer__hiddenActivationsSpatial_get, _htfe.Layer__hiddenActivationsSpatial_set)
    __swig_setmethods__["_hiddenStatesSpatial"] = _htfe.Layer__hiddenStatesSpatial_set
    __swig_getmethods__["_hiddenStatesSpatial"] = _htfe.Layer__hiddenStatesSpatial_get
    if _newclass:_hiddenStatesSpatial = _swig_property(_htfe.Layer__hiddenStatesSpatial_get, _htfe.Layer__hiddenStatesSpatial_set)
    __swig_setmethods__["_hiddenStatesSpatialPrev"] = _htfe.Layer__hiddenStatesSpatialPrev_set
    __swig_getmethods__["_hiddenStatesSpatialPrev"] = _htfe.Layer__hiddenStatesSpatialPrev_get
    if _newclass:_hiddenStatesSpatialPrev = _swig_property(_htfe.Layer__hiddenStatesSpatialPrev_get, _htfe.Layer__hiddenStatesSpatialPrev_set)
    __swig_setmethods__["_hiddenActivationsTemporal"] = _htfe.Layer__hiddenActivationsTemporal_set
    __swig_getmethods__["_hiddenActivationsTemporal"] = _htfe.Layer__hiddenActivationsTemporal_get
    if _newclass:_hiddenActivationsTemporal = _swig_property(_htfe.Layer__hiddenActivationsTemporal_get, _htfe.Layer__hiddenActivationsTemporal_set)
    __swig_setmethods__["_hiddenStatesTemporal"] = _htfe.Layer__hiddenStatesTemporal_set
    __swig_getmethods__["_hiddenStatesTemporal"] = _htfe.Layer__hiddenStatesTemporal_get
    if _newclass:_hiddenStatesTemporal = _swig_property(_htfe.Layer__hiddenStatesTemporal_get, _htfe.Layer__hiddenStatesTemporal_set)
    __swig_setmethods__["_hiddenStatesTemporalPrev"] = _htfe.Layer__hiddenStatesTemporalPrev_set
    __swig_getmethods__["_hiddenStatesTemporalPrev"] = _htfe.Layer__hiddenStatesTemporalPrev_get
    if _newclass:_hiddenStatesTemporalPrev = _swig_property(_htfe.Layer__hiddenStatesTemporalPrev_get, _htfe.Layer__hiddenStatesTemporalPrev_set)
    __swig_setmethods__["_hiddenStatesTemporalPrevPrev"] = _htfe.Layer__hiddenStatesTemporalPrevPrev_set
    __swig_getmethods__["_hiddenStatesTemporalPrevPrev"] = _htfe.Layer__hiddenStatesTemporalPrevPrev_get
    if _newclass:_hiddenStatesTemporalPrevPrev = _swig_property(_htfe.Layer__hiddenStatesTemporalPrevPrev_get, _htfe.Layer__hiddenStatesTemporalPrevPrev_set)
    __swig_setmethods__["_spatialWeights"] = _htfe.Layer__spatialWeights_set
    __swig_getmethods__["_spatialWeights"] = _htfe.Layer__spatialWeights_get
    if _newclass:_spatialWeights = _swig_property(_htfe.Layer__spatialWeights_get, _htfe.Layer__spatialWeights_set)
    __swig_setmethods__["_spatialWeightsPrev"] = _htfe.Layer__spatialWeightsPrev_set
    __swig_getmethods__["_spatialWeightsPrev"] = _htfe.Layer__spatialWeightsPrev_get
    if _newclass:_spatialWeightsPrev = _swig_property(_htfe.Layer__spatialWeightsPrev_get, _htfe.Layer__spatialWeightsPrev_set)
    __swig_setmethods__["_spatialPredictiveReconstructionWeights"] = _htfe.Layer__spatialPredictiveReconstructionWeights_set
    __swig_getmethods__["_spatialPredictiveReconstructionWeights"] = _htfe.Layer__spatialPredictiveReconstructionWeights_get
    if _newclass:_spatialPredictiveReconstructionWeights = _swig_property(_htfe.Layer__spatialPredictiveReconstructionWeights_get, _htfe.Layer__spatialPredictiveReconstructionWeights_set)
    __swig_setmethods__["_spatialPredictiveReconstructionWeightsPrev"] = _htfe.Layer__spatialPredictiveReconstructionWeightsPrev_set
    __swig_getmethods__["_spatialPredictiveReconstructionWeightsPrev"] = _htfe.Layer__spatialPredictiveReconstructionWeightsPrev_get
    if _newclass:_spatialPredictiveReconstructionWeightsPrev = _swig_property(_htfe.Layer__spatialPredictiveReconstructionWeightsPrev_get, _htfe.Layer__spatialPredictiveReconstructionWeightsPrev_set)
    __swig_setmethods__["_predictiveWeights"] = _htfe.Layer__predictiveWeights_set
    __swig_getmethods__["_predictiveWeights"] = _htfe.Layer__predictiveWeights_get
    if _newclass:_predictiveWeights = _swig_property(_htfe.Layer__predictiveWeights_get, _htfe.Layer__predictiveWeights_set)
    __swig_setmethods__["_predictiveWeightsPrev"] = _htfe.Layer__predictiveWeightsPrev_set
    __swig_getmethods__["_predictiveWeightsPrev"] = _htfe.Layer__predictiveWeightsPrev_get
    if _newclass:_predictiveWeightsPrev = _swig_property(_htfe.Layer__predictiveWeightsPrev_get, _htfe.Layer__predictiveWeightsPrev_set)
    __swig_setmethods__["_lateralWeights"] = _htfe.Layer__lateralWeights_set
    __swig_getmethods__["_lateralWeights"] = _htfe.Layer__lateralWeights_get
    if _newclass:_lateralWeights = _swig_property(_htfe.Layer__lateralWeights_get, _htfe.Layer__lateralWeights_set)
    __swig_setmethods__["_lateralWeightsPrev"] = _htfe.Layer__lateralWeightsPrev_set
    __swig_getmethods__["_lateralWeightsPrev"] = _htfe.Layer__lateralWeightsPrev_get
    if _newclass:_lateralWeightsPrev = _swig_property(_htfe.Layer__lateralWeightsPrev_get, _htfe.Layer__lateralWeightsPrev_set)
    __swig_setmethods__["_feedBackWeights"] = _htfe.Layer__feedBackWeights_set
    __swig_getmethods__["_feedBackWeights"] = _htfe.Layer__feedBackWeights_get
    if _newclass:_feedBackWeights = _swig_property(_htfe.Layer__feedBackWeights_get, _htfe.Layer__feedBackWeights_set)
    __swig_setmethods__["_feedBackWeightsPrev"] = _htfe.Layer__feedBackWeightsPrev_set
    __swig_getmethods__["_feedBackWeightsPrev"] = _htfe.Layer__feedBackWeightsPrev_get
    if _newclass:_feedBackWeightsPrev = _swig_property(_htfe.Layer__feedBackWeightsPrev_get, _htfe.Layer__feedBackWeightsPrev_set)
    __swig_setmethods__["_spatialReconstruction"] = _htfe.Layer__spatialReconstruction_set
    __swig_getmethods__["_spatialReconstruction"] = _htfe.Layer__spatialReconstruction_get
    if _newclass:_spatialReconstruction = _swig_property(_htfe.Layer__spatialReconstruction_get, _htfe.Layer__spatialReconstruction_set)
    __swig_setmethods__["_spatialReconstructionPrev"] = _htfe.Layer__spatialReconstructionPrev_set
    __swig_getmethods__["_spatialReconstructionPrev"] = _htfe.Layer__spatialReconstructionPrev_get
    if _newclass:_spatialReconstructionPrev = _swig_property(_htfe.Layer__spatialReconstructionPrev_get, _htfe.Layer__spatialReconstructionPrev_set)
    __swig_setmethods__["_temporalReconstruction"] = _htfe.Layer__temporalReconstruction_set
    __swig_getmethods__["_temporalReconstruction"] = _htfe.Layer__temporalReconstruction_get
    if _newclass:_temporalReconstruction = _swig_property(_htfe.Layer__temporalReconstruction_get, _htfe.Layer__temporalReconstruction_set)
    __swig_setmethods__["_temporalReconstructionPrev"] = _htfe.Layer__temporalReconstructionPrev_set
    __swig_getmethods__["_temporalReconstructionPrev"] = _htfe.Layer__temporalReconstructionPrev_get
    if _newclass:_temporalReconstructionPrev = _swig_property(_htfe.Layer__temporalReconstructionPrev_get, _htfe.Layer__temporalReconstructionPrev_set)
    __swig_setmethods__["_nextTemporalReconstruction"] = _htfe.Layer__nextTemporalReconstruction_set
    __swig_getmethods__["_nextTemporalReconstruction"] = _htfe.Layer__nextTemporalReconstruction_get
    if _newclass:_nextTemporalReconstruction = _swig_property(_htfe.Layer__nextTemporalReconstruction_get, _htfe.Layer__nextTemporalReconstruction_set)
    __swig_setmethods__["_nextTemporalReconstructionPrev"] = _htfe.Layer__nextTemporalReconstructionPrev_set
    __swig_getmethods__["_nextTemporalReconstructionPrev"] = _htfe.Layer__nextTemporalReconstructionPrev_get
    if _newclass:_nextTemporalReconstructionPrev = _swig_property(_htfe.Layer__nextTemporalReconstructionPrev_get, _htfe.Layer__nextTemporalReconstructionPrev_set)
    __swig_setmethods__["_predictedSpatial"] = _htfe.Layer__predictedSpatial_set
    __swig_getmethods__["_predictedSpatial"] = _htfe.Layer__predictedSpatial_get
    if _newclass:_predictedSpatial = _swig_property(_htfe.Layer__predictedSpatial_get, _htfe.Layer__predictedSpatial_set)
    __swig_setmethods__["_predictedSpatialPrev"] = _htfe.Layer__predictedSpatialPrev_set
    __swig_getmethods__["_predictedSpatialPrev"] = _htfe.Layer__predictedSpatialPrev_get
    if _newclass:_predictedSpatialPrev = _swig_property(_htfe.Layer__predictedSpatialPrev_get, _htfe.Layer__predictedSpatialPrev_set)
    __swig_setmethods__["_inputReconstruction"] = _htfe.Layer__inputReconstruction_set
    __swig_getmethods__["_inputReconstruction"] = _htfe.Layer__inputReconstruction_get
    if _newclass:_inputReconstruction = _swig_property(_htfe.Layer__inputReconstruction_get, _htfe.Layer__inputReconstruction_set)
    __swig_setmethods__["_predictedInputReconstruction"] = _htfe.Layer__predictedInputReconstruction_set
    __swig_getmethods__["_predictedInputReconstruction"] = _htfe.Layer__predictedInputReconstruction_get
    if _newclass:_predictedInputReconstruction = _swig_property(_htfe.Layer__predictedInputReconstruction_get, _htfe.Layer__predictedInputReconstruction_set)
    def __init__(self): 
        this = _htfe.new_Layer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _htfe.delete_Layer
    __del__ = lambda self : None;
Layer_swigregister = _htfe.Layer_swigregister
Layer_swigregister(Layer)

class HTFE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTFE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTFE, name)
    __repr__ = _swig_repr
    def createRandom(self, *args): return _htfe.HTFE_createRandom(self, *args)
    def activate(self, *args): return _htfe.HTFE_activate(self, *args)
    def learn(self, *args): return _htfe.HTFE_learn(self, *args)
    def stepEnd(self): return _htfe.HTFE_stepEnd(self)
    def getInputWidth(self): return _htfe.HTFE_getInputWidth(self)
    def getInputHeight(self): return _htfe.HTFE_getInputHeight(self)
    def getLayerDescs(self): return _htfe.HTFE_getLayerDescs(self)
    def getLayers(self): return _htfe.HTFE_getLayers(self)
    def getInputImage(self): return _htfe.HTFE_getInputImage(self)
    def setInput(self, *args): return _htfe.HTFE_setInput(self, *args)
    def getPrediction(self, *args): return _htfe.HTFE_getPrediction(self, *args)
    def __init__(self): 
        this = _htfe.new_HTFE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _htfe.delete_HTFE
    __del__ = lambda self : None;
HTFE_swigregister = _htfe.HTFE_swigregister
HTFE_swigregister(HTFE)

SYS_ALLOW_CL_GL_CONTEXT = _htfe.SYS_ALLOW_CL_GL_CONTEXT
_cpu = _htfe._cpu
_gpu = _htfe._gpu
_all = _htfe._all
_none = _htfe._none
class ComputeSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputeSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputeSystem, name)
    __repr__ = _swig_repr
    def create(self, *args): return _htfe.ComputeSystem_create(self, *args)
    def getPlatform(self): return _htfe.ComputeSystem_getPlatform(self)
    def getDevice(self): return _htfe.ComputeSystem_getDevice(self)
    def getContext(self): return _htfe.ComputeSystem_getContext(self)
    def getQueue(self): return _htfe.ComputeSystem_getQueue(self)
    def __init__(self): 
        this = _htfe.new_ComputeSystem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _htfe.delete_ComputeSystem
    __del__ = lambda self : None;
ComputeSystem_swigregister = _htfe.ComputeSystem_swigregister
ComputeSystem_swigregister(ComputeSystem)

class ComputeProgram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputeProgram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputeProgram, name)
    __repr__ = _swig_repr
    def loadFromFile(self, *args): return _htfe.ComputeProgram_loadFromFile(self, *args)
    def getProgram(self): return _htfe.ComputeProgram_getProgram(self)
    def __init__(self): 
        this = _htfe.new_ComputeProgram()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _htfe.delete_ComputeProgram
    __del__ = lambda self : None;
ComputeProgram_swigregister = _htfe.ComputeProgram_swigregister
ComputeProgram_swigregister(ComputeProgram)

# This file is compatible with both classic and new-style classes.


